#!/usr/bin/env python3
import requests
import re
import json
import sys
import os
import termios
from time import sleep
from sys import stdin
from termios import tcflush, TCIFLUSH

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def get_secure_input(prompt, show_input=True):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    
    if not show_input:
        new[3] = new[3] & ~termios.ECHO
    else:
        new[3] = new[3] | termios.ECHO
        
    try:
        termios.tcsetattr(fd, termios.TCSADRAIN, new)
        user_input = input(prompt)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
        tcflush(stdin, TCIFLUSH)
        if not show_input:
            print()
    return user_input.strip()

def show_banner():
    clear_screen()
    print("\033[1;36m")
    print("  _______  ______   _______  _______  _______  ___   _______  _______ ")
    print(" |       ||      | |       ||       ||       ||   | |       ||       |")
    print(" |    ___||  _    ||    ___||    ___||    ___||   | |_     _||    ___|")
    print(" |   |___ | | |   ||   |___ |   |___ |   |___ |   |   |   |  |   |___ ")
    print(" |    ___|| |_|   ||    ___||    ___||    ___||   |   |   |  |    ___|")
    print(" |   |    |       ||   |___ |   |    |   |___ |   |   |   |  |   |___ ")
    print(" |___|    |______| |_______||___|    |_______||___|   |___|  |_______|")
    print("\033[1;35m")
    print("            Token & Cookie Generator - Fixed Version")
    print("\033[1;33m")
    print("-------------------------------------------------------------")
    print("\033[0m")
    sleep(1)

def safe_extract(pattern, text, default=""):
    try:
        match = re.search(pattern, text)
        return match.group(1) if match else default
    except:
        return default

def extract_login_params(html):
    return {
        'lsd': safe_extract(r'name="lsd" value="(.*?)"', html, "G7JQ"),
        'jazoest': safe_extract(r'name="jazoest" value="(.*?)"', html, "2874"),
        'm_ts': safe_extract(r'name="m_ts" value="(.*?)"', html, str(int(time.time()))),
        'li': safe_extract(r'name="li" value="(.*?)"', html, "8wLd")
    }

def get_fb_token(username, password):
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive'
    })

    try:
        print("\033[1;33m[1/4] Loading Facebook login page...\033[0m")
        response = session.get('https://m.facebook.com/')
        
        if "login" not in response.text.lower():
            return {
                'status': 'error',
                'message': 'Facebook login page not loaded correctly'
            }
            
        login_params = extract_login_params(response.text)
        
        login_data = {
            'lsd': login_params['lsd'],
            'jazoest': login_params['jazoest'],
            'm_ts': login_params['m_ts'],
            'li': login_params['li'],
            'try_number': '0',
            'unrecognized_tries': '0',
            'email': username,
            'pass': password,
            'login': 'Log In',
            'bi_xrwh': '0'
        }
        
        print("\033[1;33m[2/4] Attempting login...\033[0m")
        response = session.post(
            'https://m.facebook.com/login/device-based/regular/login/',
            data=login_data,
            allow_redirects=True
        )
        
        if 'c_user' in session.cookies:
            user_id = session.cookies.get('c_user')
            print("\033[1;33m[3/4] Login successful! Fetching profile...\033[0m")
            
            profile_response = session.get(f'https://m.facebook.com/profile.php?id={user_id}')
            profile_name = safe_extract(r'<title>(.*?)<\/title>', profile_response.text, "Unknown").split('|')[0].strip()
            
            print("\033[1;33m[4/4] Fetching access token...\033[0m")
            token_response = session.get(
                'https://m.facebook.com/dialog/oauth?client_id=124024574287414&redirect_uri=fbconnect://success&scope=email&response_type=token'
            )
            
            access_token = None
            if token_response.url and 'access_token=' in token_response.url:
                access_token = token_response.url.split('access_token=')[1].split('&')[0]
            
            return {
                'status': 'success',
                'cookies': session.cookies.get_dict(),
                'access_token': access_token,
                'profile_name': profile_name,
                'user_id': user_id
            }
        elif 'checkpoint' in response.url:
            return {
                'status': 'checkpoint',
                'message': 'Account verification required. Please check your account.'
            }
        else:
            error_msg = safe_extract(r'<div[^>]*class="[^"]*error[^"]*"[^>]*>([^<]+)', response.text, "Login failed. Check your credentials.")
            return {
                'status': 'failed',
                'message': error_msg.strip()
            }
            
    except Exception as e:
        return {
            'status': 'error',
            'message': f'An error occurred: {str(e)}'
        }

def show_result(result):
    clear_screen()
    if result['status'] == 'success':
        print("\033[1;32m[ SUCCESS ]\033[0m")
        print(f"\nProfile Name: \033[1;36m{result['profile_name']}\033[0m")
        print(f"User ID: \033[1;36m{result['user_id']}\033[0m")
        
        print("\n\033[1;35m=== Cookies ===\033[0m")
        print(json.dumps(result['cookies'], indent=2))
        
        print("\n\033[1;35m=== Access Token ===\033[0m")
        print(result['access_token'])
        
        print("\n\033[1;31mIMPORTANT: Keep this information secure!\033[0m")
    else:
        print("\033[1;31m[ ERROR ]\033[0m")
        print(f"\n\033[1;31m{result.get('message', 'Unknown error occurred')}\033[0m")

def main():
    show_banner()
    
    print("\033[1;33mDISCLAIMER:\033[0m")
    print("This tool generates Facebook access tokens for development purposes.")
    print("Your credentials are used only for authentication and are not stored.")
    print("\033[1;31mNever share your credentials or tokens with anyone!\033[0m")
    
    confirm = input("\nContinue? (yes/no): ").lower().strip()
    if confirm != 'yes':
        print("Exiting...")
        sys.exit(0)
    
    clear_screen()
    print("\033[1;34mFacebook Login\033[0m")
    username = input("\nEnter Facebook username/email/phone: ").strip()
    
    print("\n\033[1;33mType your password below (visible for verification):\033[0m")
    password = get_secure_input("Enter Facebook password (visible): ", show_input=True)
    
    print("\n\033[1;33mPlease retype your password (hidden for security):\033[0m")
    password_verify = get_secure_input("Verify password: ", show_input=False)
    
    if password != password_verify:
        print("\033[1;31mError: Passwords do not match!\033[0m")
        sys.exit(1)
    
    result = get_fb_token(username, password)
    show_result(result)
    
    if result['status'] == 'success':
        save = input("\nSave to file? (yes/no): ").lower().strip()
        if save == 'yes':
            filename = f"fb_{result['user_id']}_token.txt"
            with open(filename, 'w') as f:
                f.write(f"Profile: {result['profile_name']}\n")
                f.write(f"User ID: {result['user_id']}\n\n")
                f.write("Cookies:\n")
                f.write(json.dumps(result['cookies'], indent=2))
                f.write("\n\nToken:\n")
                f.write(result['access_token'])
            print(f"Saved to {filename}")
    
    print("\n\033[1;35mProcess completed. Exiting...\033[0m")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\033[1;31mOperation cancelled by user\033[0m")
        sys.exit(0)
    except Exception as e:
        print(f"\n\033[1;31mCritical error: {str(e)}\033[0m")
        sys.exit(1)
